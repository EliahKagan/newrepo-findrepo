#!/usr/bin/env python3
"""
This utility runs on the server, where it reports a URL clients should use to
clone an existing repo or to add it as a remote. If the repo is not found, it
makes suggestions to the user about which existing repo they might intend.

Usage:

    findrepo NAME
"""

import collections
import contextlib
import glob
import math
import os
import re
import shutil
import sys

# The configuration file for findrepo. Currently just stores the URL host name.
CONF_PATH = '/etc/newrepo-findrepo.conf'

# The expected and recommended name for this command.
FINDREPO_COMMAND = 'findrepo'

# The full path where this script is expected to be installed systemwide.
SYSTEM_FINDREPO_PATH = '/usr/local/bin/' + FINDREPO_COMMAND

# This environment variable indicates a frontend is used, and its name.
REMOTE_FRONTEND_MODE_TRIGGER = 'FINDREPO_REMOTE_FRONTEND_COMMAND_NAME'

# The directory on the server where repos are kept.
REPO_DIR = '/repos'

# The extension that's expected, stripped from, and restored to repo pathnames.
GIT_SUFFIX = '.git'

# This environment variable has us print all cosine similarities. (See below.)
COSINE_SIMILARITY_DEBUG_MODE_TRIGGER = 'DEBUG_COSINE_SIMILARITY'

# When no repo matches the user's pattern, even case-insensitively, we guess
# based on cosine similarity of multisets of non-empty substrings. We show at
# least this many guesses unless no known repos have even slightly similar
# names. And we may show more, if it would be confusing not to. (See below.)
COSINE_SIMILARITY_SUGGESTION_COUNT = 5
# TODO: Show more results if similarity is high, and fewer if it is low.

# Repos whose substring cosine similarity to the user-provided pattern is less
# than this value will not be shown, even if they are the closest matches.
COSINE_SIMILARITY_CUTOFF = 0.1

# In accordance with the principle of least astonishment, if a guessed repo is
# listed, all repos that match at least as well are listed too. It feels like
# we should also print repo names that match slightly less well, such that the
# difference in strength is almost surely irrelevant. However, it might be bad
# that we are doing this transitively. To experiment, change this constant to
# some slightly greater (or perhaps smaller, but still nonnegative) value.
# Also, you might want matches that are believed to be fairly bad, for
# debugging. For that, increase this to some still bigger positive value.
COSINE_SIMILARITY_EPSILON = 0.0001

# ANSI escape code for some color to use for (sparingly issued) alerts.
ALERT_COLOR = '\033[91m'  # bright red

# ANSI escape code to restore normal text color and style. Don't change this.
NORMAL_COLOR = '\033[0m'

assert REPO_DIR and REPO_DIR[0] == '/' and REPO_DIR[-1] != '/'
assert GIT_SUFFIX[:1] == '.', 'git repo suffix must start with "."'
assert COSINE_SIMILARITY_SUGGESTION_COUNT > 0
assert COSINE_SIMILARITY_CUTOFF > 0.0
assert COSINE_SIMILARITY_EPSILON >= 0.0

CONF_MAPPING_REGEX = re.compile(r'^([^=]+)=(.+)$')


class LazyRowSorter:
    """An associative table that sorts its rows when they are accessed."""
    __slots__ = ('_rows',)

    def __init__(self):
        """Creates a LazyRowSorter that doesn't have any rows yet."""
        # Not a defaultdict. Nonexistent row *retrieval* should raise KeyError.
        self._rows = {}

    def __bool__(self):
        """Indicates if the table is nonempty (i.e., has one or more rows)."""
        return bool(self._rows)

    def __getitem__(self, key):
        """Sorts and returns the row for key. Raises KeyError on failure."""
        # The expected use is to retrieve a row 0, 1, or occasionally 2 times.
        # Even if it happens more, Timsort is very fast with presorted data.
        row = self._rows[key]
        assert row, "empty rows shouldn't have been made in the first place"
        row.sort()
        return row

    def put(self, key, item):
        """Adds item to the row for key. Creates the row if there isn't one."""
        try:
            self._rows[key].append(item)
        except KeyError:
            self._rows[key] = [item]

    def keys(self):
        """Provides a view of the keys to each row."""
        return self._rows.keys()


Guess = collections.namedtuple('Guess', ('key', 'similarity'))

Guess.__doc__ = """
A case-folded repo name and its cosine similarity to some case-folded
user-provided pattern.
"""


def as_alert(text):
    """Adds ANSI escape codes around text so it will be highlighted."""
    return '%s%s%s' % (ALERT_COLOR, text, NORMAL_COLOR)


def alert(message):
    """Writes a paragraph alert."""
    if REMOTE_FRONTEND_MODE_TRIGGER in os.environ:
        intro = 'Note (from server): '
    else:
        intro = 'Note: '
    print(as_alert(intro + message), file=sys.stderr)
    sys.stderr.flush()  # Windows frontends, connected via SSH, need this.
    print()  # Goes to stdout, to separate this from the remaining output.


def name_alert(message_format):
    """Writes a paragraph alert, with %s replaced by the command name."""
    alert(message_format % FINDREPO_COMMAND)


def same_file(path1, path2):
    """Tells if two paths seem to be, or be symlinks to, the same file."""
    stat1 = os.stat(path1)
    stat2 = os.stat(path2)
    return stat1.st_dev == stat2.st_dev and stat1.st_ino == stat2.st_ino


def version_check():
    """Warns if this doesn't appear to be the systemwide findrepo script."""
    try:
        if not same_file(__file__, SYSTEM_FINDREPO_PATH):
            name_alert("This isn't the globally installed version of %s.")
    except FileNotFoundError:
        name_alert('%s seems not to be globally installed.')
    except PermissionError:
        name_alert("I can't tell if %s is globally installed.")


def invocation_name():
    """An educated guess of what name was or should be used for findrepo."""
    # If the path is relative, assume it is manually entered and just keep it.
    pathname = sys.argv[0]
    if not os.path.isabs(pathname):
        return pathname

    # If an absolute path's basename resolves to it exactly, use the basename.
    filename = os.path.basename(pathname)
    return filename if shutil.which(filename) == pathname else pathname


def usage():
    """Prints a usage message and exits."""
    try:
        caller_name = os.environ[REMOTE_FRONTEND_MODE_TRIGGER]
    except KeyError:
        caller_name = invocation_name()
    print('Usage:  %s NAME' % caller_name, file=sys.stderr)
    sys.exit(1)


def get_url_hostname(conf_path):
    """Reads the configuration file and extracts the last "host" mapping."""
    try:
        with open(conf_path) as conf_file:
            rows = map(CONF_MAPPING_REGEX.match, conf_file)
            return {row.group(1): row.group(2) for row in rows if row}['host']
    except OSError:
        print("Can't read config from " + conf_path, file=sys.stderr)
    except KeyError:
        print('No host config in ' + conf_path, file=sys.stderr)

    exit(2)


def _trim_git_suffix(path):
    """Non-checking helper function for suffix-trimming functions."""
    return path[:-len(GIT_SUFFIX)]


def trim_git_suffix(path):
    """Assumes path ends in ".git" and removes it."""
    assert path.endswith(GIT_SUFFIX), 'the suffix to be trimmed is not present'
    return _trim_git_suffix(path)


def trim_git_suffix_if_present(path):
    """Returns path with any trailing occurrence of GIT_SUFFIX removed."""
    return _trim_git_suffix(path) if path.endswith(GIT_SUFFIX) else path


def get_pattern():
    """Interprets the command-line argument as the name of a possible repo."""
    if len(sys.argv) != 2:
        usage()
    ret = trim_git_suffix_if_present(sys.argv[1])
    if '/' in ret or not ret:  # We want a valid dir name (or its basename).
        usage()
    return ret


def all_repos():
    """Gets the names of all repos."""
    os.chdir(REPO_DIR)  # We never depend on the original CWD, so this is fine.
    return [trim_git_suffix(path) for path in glob.iglob('*' + GIT_SUFFIX)]


def group_by_casefold(names):
    """Groups names by case-folding equivalence."""
    table = LazyRowSorter()
    for name in names:
        table.put(name.casefold(), name)
    return table


def show_url(repo, url_prefix):
    """Displays the repo URL in a manner similar to the output of newrepo."""
    print('The URL for the repository "%s" is:' % repo)
    print()
    print('\t%s%s%s' % (url_prefix, repo, GIT_SUFFIX))
    print()


def show_repos(row):
    """Prints all repo names from row."""
    for repo in row:
        print('\t%s' % repo)


def show_repos_with_match_mark(row, pattern):
    """Prints all repo names from row, indicating which matches the pattern."""
    for repo in row:
        mark = '*' if repo == pattern else ''
        print('%7s %s' % (mark, repo))


def show_exact_match(pattern, row, url_prefix):
    """Assumes an exact match, shows it, and warns about any case clashes."""
    show_url(pattern, url_prefix)

    if len(row) != 1:
        # Warn the user that there are multiple case-insensitive matches.
        situation = 'named like this but capitalized differently'
        if len(row) == 2:
            print('BEWARE! Another repo is %s.' % situation)
        else:
            print('BEWARE! %d other repos are %s.' % (len(row) - 1, situation))
        print()
        show_repos_with_match_mark(row, pattern)
        print()


def show_unique_casefold(pattern, row, url_prefix):
    """Assumes an inexact unique case-insensitive match. Shows it and warns."""
    print('I have no "%s" repo. Perhaps you mean "%s"?' % (pattern, row[0]))
    print()
    show_url(row[0], url_prefix)
    print("BEWARE! The filesystem on this server is case-sensitive.")


def show_multiple_casefolds(pattern, row):
    """Assumes no exact match and two or more casefolds. Shows them all."""
    print('I have no "%s" repo. Maybe you want one of these...' % pattern)
    print()
    show_repos(row)
    print()
    print('Those repos are like what you requested,'
          ' but with different capitalization.')
    print('If any of those look EXACTLY the same,'
          ' they may have weird Unicode characters.')


def substring_frequency_vector(key):
    """Computes (substring -> frequency) mappings, represented as a Counter."""
    return collections.Counter(key[start:stop]
                               for stop in range(len(key) + 1)
                               for start in range(stop))


def _inner_product(u, v):  # pylint: disable=invalid-name
    """Does the actual work of computing the (substr -> freq) dot product."""
    return sum(freq * v[substr] for substr, freq in u.items())


def inner_product(u, v):  # pylint: disable=invalid-name
    """Computes the dot product of two (substr -> freq) mappings."""
    # Iterate through the vector with smaller support, to save time.
    return _inner_product(v, u) if len(v) < len(u) else _inner_product(u, v)


def square(vector):
    """Computes the dot product of a (substr -> freq) mapping with itself."""
    return sum(freq * freq for freq in vector.values())


def debug_guesses(guesses):
    """Prints all cosine similarities if the trigger to do so is defined."""
    if COSINE_SIMILARITY_DEBUG_MODE_TRIGGER not in os.environ:
        return

    print('The environment variable %s is defined. The following'
          % COSINE_SIMILARITY_DEBUG_MODE_TRIGGER, file=sys.stderr)
    print('is a table of cosine similarities between the pattern key and EACH'
          ' repo key:', file=sys.stderr)

    max_key_width = max(len(guess.key) for guess in guesses)

    for key, similarity in guesses:
        angle = math.acos(similarity)

        print('\t%.6f \t%-*s \t%.3f rad \t%.2f\N{DEGREE SIGN}'
              % (similarity, max_key_width, key, angle, math.degrees(angle)),
              file=sys.stderr)

    print(file=sys.stderr)
    sys.stderr.flush()  # Windows frontends, connected via SSH, need this.


def keys_with_substring_cosine_similarity(keys, pattern_key):
    """
    Gets all keys, in descending order of similarity to pattern_key. In cases
    of equal similarity, the tie is broken lexicographically by key text.
    """
    # This implementation precomputes squares, not norms, for better precision.
    vectors = {key: substring_frequency_vector(key) for key in keys}
    squares = {key: square(v) for key, v in vectors.items()}
    pattern_vector = substring_frequency_vector(pattern_key)
    pattern_square = square(pattern_vector)

    def pattern_similarity(key):
        """Computes a repo key vector's similarity to the pattern vector."""
        return (inner_product(vectors[key], pattern_vector)
                / math.sqrt(squares[key] * pattern_square))

    guesses = [Guess(key, pattern_similarity(key)) for key in keys]
    guesses.sort(key=lambda guess: (-guess.similarity, guess.key))
    debug_guesses(guesses)
    return guesses


def plausible_guesses(keys, pattern_key):
    """Gets all guesses that seem good enough to possibly show the user."""
    # Computing substring cosine similarities is the asymptotically slowest
    # step and COSINE_SIMILARITY_CUTOFF is small. If we pruned guesses before
    # sorting when we have COSINE_SIMILARITY_DEBUG_MODE_TRIGGER, but after
    # sorting when we don't, the program would be more complicated and bug-
    # prone, with only a small improvement in performance. For the same reason,
    # I haven't written a binary search, nor made Guess a fully-fledged class
    # with __lt__ to use the bisect module (note also that such a class should
    # define __slots__ = () for the effect on performance to remain positive).
    guesses = keys_with_substring_cosine_similarity(keys, pattern_key)

    # Usually we keep most guesses, so check them from right to left.
    with contextlib.suppress(IndexError):
        while guesses[-1].similarity < COSINE_SIMILARITY_CUTOFF:
            del guesses[-1]

    return guesses


def announce_guesses(guesses, table, pattern):
    """Prints a heading explaining if guesses are about to be suggested."""
    situation = 'I have no "%s" repo' % pattern
    if not guesses:
        print('%s, nor any named even vaguely like it.' % situation)
    elif len(guesses) == 1 and len(table[guesses[0].key]) == 1:
        print('%s. This repo has a vaguely similar name...' % situation)
    else:
        print('%s. These repos have vaguely similar names...' % situation)


def suggest_guesses(guesses, table):
    """Suggests guesses to the user."""
    prev_similarity = float('inf')  # Because Python 3.4 doesn't have math.inf.
    remaining = COSINE_SIMILARITY_SUGGESTION_COUNT

    for key, similarity in guesses:
        delta = prev_similarity - similarity
        assert delta >= 0.0, 'guesses must be sorted from more to less similar'
        if remaining <= 0 and delta > COSINE_SIMILARITY_EPSILON:
            break

        prev_similarity = similarity
        row = table[key]
        remaining -= len(row)
        show_repos(row)


def find_repo(table, pattern, pattern_key, url_prefix):
    """Find the repo and show its URL, or give the user helpful suggestions."""
    try:
        row = table[pattern_key]
    except KeyError:
        # We don't even have a case-insensitive match.
        guesses = plausible_guesses(table.keys(), pattern_key)

        announce_guesses(guesses, table, pattern)

        if guesses:
            print()
            suggest_guesses(guesses, table)
            print()
    else:
        # We at least have a case-insensitive match.
        if pattern in row:
            show_exact_match(pattern, row, url_prefix)
        elif len(row) == 1:
            show_unique_casefold(pattern, row, url_prefix)
        else:
            show_multiple_casefolds(pattern, row)


def run():
    """Retrieves repo names and looks for one resembling the user's request."""
    # Make the URL prefix first so we fail immediately on configuration errors.
    url_prefix = 'ssh://%s%s/' % (get_url_hostname(CONF_PATH), REPO_DIR)

    # Get the pattern now so we fail fast on syntax errors.
    pattern = get_pattern()

    # Retrieve the repos. Stop if there are none, which we consider an error.
    repos = all_repos()
    if not repos:
        print('I have no "%s" repo. In fact, I have no repos at all!'
              % pattern)
        exit(1)

    # We need this even for an exact match, to warn about case variants.
    table = group_by_casefold(repos)
    pattern_key = pattern.casefold()
    assert pattern_key, "case folding shouldn't make a non-empty string empty"

    # We are ready to match repo names to the user's pattern.
    find_repo(table, pattern, pattern_key, url_prefix)


if __name__ == '__main__':
    version_check()
    run()
